/* =========================================================
 * bootstrap-validation.js
 * =========================================================
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ========================================================= */
/* =========================================================
 *  使用说明
 * =========================================================
 *	$('#myform').validation({
 *		breakOnError: false,	// 出现错误后立即中断验证
 *		onSuccess: function() {},  // 验证成功后调用。返回 true 表示执行表单默认操作
 *		onErrorMessage: function(message, jq_field) {},  // 显示验证错误信息时调用。返回 false 取消组件默认的显示操作
 *		onFaile: function() {}  // 验证失败后调用
 *	});
 * ========================================================= */
!function ($) {
        // Debug method
        var showError = function (message, ele) {
                console.error(message);
        };
        //
        // 验证规则：
        //   方法只有在出现错误时才返回错误信息，正确时不返回信息
        //
        var validationRules = {
                // 预处理方法
                'trim': {
                        validate: function (value, ele, params) {
                                ele.val($.trim(ele.val()));
                        }
                },
                // toUpperCase
                'upper': {
                        validate: function (value, ele, params) {
                                ele.val(ele.val().toUpperCase());
                        }
                },

                'lower': {
                        validate: function (value, ele, params) {
                                ele.val(ele.val().toLowerCase());
                        }
                },

                // 验证
                'required': {
                        validate: function (value, ele, params) {
                                var len = params.length;
                                if (len > 0) {
                                        var form = ele.parents('form'),
                                                sel = 'input[name="__"],textarea[name="__"],select[name="__"]';
                                        // 有多个参数时, 表示多个字段n选一
                                        for (var i = 0; i < len; i++) {
                                                var ov = $(sel.split('__').join(params[i]), form);
                                                if ($.trim(ov.val()) != '')  return true;
                                        }
                                }
                                return $.trim(value) == '' ? getMessageFor(ele, 'required', null) : true;
                        },
                        message: '不能为空'
                },

                'confirm': {
                        validate: function (value, ele, params) {
                                var form = ele.parents('form'),
                                        confirm = $('input[name="' + params[0] + '"]', form);
                                return value == confirm.val() ? null : getMessageFor(ele, 'confirm');
                        },
                        autoLabel:false,
                        message: '验证内容不匹配.'
                },
                'nequal':{
                    validate: function (value, ele, params) {
                        var form = ele.parents('form'),
                            confirm = $('input[name="' + params[0] + '"]', form);
                        return value != confirm.val() ? null : getMessageFor(ele, 'nequal');
                    },
                    message: '内容不能相同.'
                },
                // 关联字段校验, 必须相关关联字段验证通过再验证本字段
                'relate': {
                        validate: function (value, ele, params) {
                                //
                                // TODO::完善
                                //
                                return null;
                        },
                        message: '关联字段验证失败.'
                },
                'email': {
                        validate: function (value, ele, params) {
                                if (value == '' || value == null){
                                        return '';
                                }
                                var test = /^([a-z1-9][_a-z0-9-]+)(\.[_a-z0-9-]+)*@[a-z0-9-]+(\.[a-z0-9-]+){1,3}$/i.test(value);
                                return test ? '' : getMessageFor(ele, 'email');
                        },
                        autoLabel: false,
                        message: '格式不正确.'
                },
                // 正则表达式
                'regexp': {
                        validate: function (value, ele, params) {
                                if (value == '' || value == null){
                                        return '';
                                }
                                var reg = new RegExp(params[0], params.length > 1 ? params[1] : '');
                                return reg.test(value) ? '' : getMessageFor(ele, 'regexp');
                        },
                        message: '格式不正确.'
                },
                // 英文单词
                'alpha': {
                        validate: function (value, ele, params) {
                                if (value == '' || value == null){
                                        return '';
                                }
                                return (/^[a-z\_\-]*$/i.test(value)) ? '' : getMessageFor(ele, 'alpha');
                        },
                        message: '必须是 "a-z", "_", "-" 等字符.'
                },
                //
                'alphanum': {
                        validate: function (value, ele, params) {
                                if (value == '' || value == null){
                                        return '';
                                }
                                return (/^[\w\d]*$/.test(value)) ? '' : getMessageFor(ele, 'alphanum');
                        },
                        message: '必须是字母和数字.'
                },
                // 限制中文字符
                'chinese': {
                        validate: function (value, ele, params) {
                                if (value == '' || value == null){
                                        return '';
                                }
                                var test = (/^[\u4e00-\u9fff]$/.test(value));
                                return test ? '' : getMessageFor(ele, 'chinese');
                        },
                        message: '必须是中文字符.'
                },
                //
                'numberic': {
                        validate: function (value, ele, params) {
                                if (value == '' || value == null){
                                        return '';
                                }

                                var test = (/^\d+$/.test(value));
                                return test ? '' : getMessageFor(ele, 'numberic');
                        },
                        message: '必须是0-9的数字.'
                },
                'alldigit': {
                        validate: function (value, ele, params) {
                                if (value == '' || value == null){
                                        return '';
                                }
                                var test = (/^\d+$/.test(value));
                                return test ? getMessageFor(ele, 'alldigit') : '';
                        },
                        message: '不能全为数字.'
                },
                'allchar': {
                        validate: function (value, ele, params) {
                                if (value == '' || value == null){
                                        return '';
                                }
                                var test = (/^[A-Za-z]+$/.test(value));
                                return test ? getMessageFor(ele, 'allchar') : '';
                        },
                        message: '不能全为字母.'
                },
                'decimal': {
                        validate: function (value, ele, params) {
                                if (value == '' || value == null){
                                        return '';
                                }
                                return (/^[\-\+]?\d+(\.\d+)?$/.test(value)) ? '' : getMessageFor(ele, 'decimal');
                        },
                        message: '必须是浮点数或整数.'
                },
                'len': {
                        validate: function (value, ele, params) {
                                var len = parseInt(params[0]);
                                var val = value.length != len;
                                return value.length != len ? getMessageFor(ele, 'len', [len]) : null;
                        },
                        message: '长度必须为 %s 个字符.'
                },
                'minlen': {
                        validate: function (value, ele, params) {
                                var len = parseInt(params[0]);
                                return value.length < len ? getMessageFor(ele, 'minlen', [len]) : null;
                        },
                        message: '最小长度为 %s 个字符.'
                },
                'maxlen': {
                        validate: function (value, ele, params) {
                                var len = parseInt(params[0]);
                                return value.length > len ? getMessageFor(ele, 'maxlen', [len]) : null;
                        },
                        message: '最大长度为 %s 个字符.'
                },
                'telephone': {
                        validate: function (value, ele, params) {
                                if (value == '' || value == null){
                                        return '';
                                }
                                var test = !(/^0?\d{2,3}[^\d][1-9]\d{4,8}([^\d]\d{1,6})*$/).test(value);
                                return test ? getMessageFor(ele, 'telephone') : null;
                        },
                        message: '格式: 010-12345678 8001.'
                },
                'mobile': {
                        validate: function (value, ele, params) {
                                if (value == '' || value == null){
                                        return '';
                                }
                                var test = !(/^(?:13|15|18|14|17)\d{9}$/).test(value);
                                return test ? getMessageFor(ele, 'mobile') : null;
                        },
                        message: '格式不正确.'
                },
                'zipcode': {
                        validate: function (value, ele, params) {
                                if (value == '' || value == null){
                                        return '';
                                }
                                var test = !(/^\d{6}$/).test(value);
                                return test ? getMessageFor(ele, 'zipcode') : null;
                        },
                        message: '格式不正确.'
                },
                //密码强度验证
                'pwdstrength':{
                        validate:function(value,ele,params){
                            if (value == '' || value == null){
                                return '';
                            }
                            //var capital = value.match(/[A-Z]{1}/); //找大写字母
                            //var small = value.match(/[a-z]{1}/); //找小写字母
                            //var bDigi = false;
                            //var bOther = false;
                            //
                            //for (var i = 0; i < value.length; i++) {
                            //    if (value.charAt(i) <= '9' && value.charAt(i) >= '0') {
                            //        bDigi = true;
                            //        break;
                            //    }
                            //}
                            //
                            //
                            //for (var i = 0; i < value.length; i++) {
                            //    if ((value.charAt(i) >= '0' && value.charAt(i) <= '9') ||
                            //        (value.charAt(i) >= 'A' && value.charAt(i) <= 'Z') ||
                            //        (value.charAt(i) >= 'a' && value.charAt(i) <= 'z')) {
                            //        continue;
                            //    }
                            //    bOther = true;
                            //    break;
                            //}
                            //var matchSize=0;
                            //if(capital)matchSize++;
                            //if(small)matchSize++;
                            //if(bDigi)matchSize++;
                            //if(bOther)matchSize++;
                            //return (matchSize<3)? getMessageFor(ele, 'pwdstrength') : null;

                            var b9Digi = false; //是否9位以下的纯数字

                            if(value.match(/^\d+$/) && value.length < 9){
                                b9Digi = true;
                            }

                            var bBlank = false; //是否包含空格

                            if(value.match(/\s/)){
                                bBlank = true;
                            }
                            return (b9Digi || bBlank)? getMessageFor(ele, 'pwdstrength') : null;

                        },
                        //message:'必须包含大写字母、小写字母、数字和特殊字符的三种及以上'
                        message:'不能是9位以下的纯数字，不能包含空格'
                },
                // 身份证
                'idcard': {
                        validate: function (value, ele, confs) {
                                if (value == '' || value == null){
                                        return '';
                                }

                                var mode = 'STRICT',
                                        yearStart = yearEnd = NaN;

                                if (confs.length == 1) {
                                        // 检测模式 true|false, 严格|宽松
                                        mode = (confs[0] == 'true' || confs[0] == 's') ? 'STRICT' : 'LOSE'
                                }
                                if (confs.length == 2) {
                                        // 限制最小年份
                                        yearStart = parseInt(confs[1]);
                                }
                                if (confs.length == 3) {
                                        // 限制最大年份
                                        yearEnd = parseInt(confs[2]);
                                }
                                yearStart = isNaN(yearStart) ? 1900 : yearStart;
                                yearEnd = isNaN(yearEnd) ? (new Date()).getFullYear() : yearEnd;
                                var reg = /^(\d{15}|\d{18}|\d{17}[Xx])$/;
                                var year, month, day;

                                if (reg.test(value)) {
                                        // LOOSE || STRICT
                                        if (mode != 'LOOSE') {
                                                if (value.length == 18) {
                                                        //检查校验码
                                                        var a = value.split("");
                                                        var b = [7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2];
                                                        var v = ["1", "0", "X", "9", "8", "7", "6", "5", "4", "3", "2"];
                                                        var sum = 0;
                                                        for (var i = 0; i < 17; i++) {
                                                                sum += b[i] * a[i];
                                                        }
                                                        var mod = sum % 11;
                                                        if (v[mod] != String(a[17]).toUpperCase()) {
                                                                return getMessageFor(ele, 'idcard');
                                                        }
                                                        //
                                                        // Use parseFloat() to figure IE8 parseInt() bug
                                                        // REF: http://blog.sina.com.cn/s/blog_53785e190100qzxn.html
                                                        //
                                                        year = parseFloat(value.substr(6, 4));
                                                        month = parseFloat(value.substr(10, 2));
                                                        day = parseFloat(value.substr(12, 2));
                                                } else {
                                                        year = parseFloat("19" + value.substr(6, 2));
                                                        month = parseFloat(value.substr(8, 2));
                                                        day = parseFloat(value.substr(10, 2));
                                                }
                                                /*
                                                 * 严格限制年份. 不得超过当前系统时间, 不得早于指定时间
                                                 */
                                                if (month > 12 || month == 0 || day == 0 || year < yearStart || year > yearEnd) {
                                                        return getMessageFor(ele, 'idcard');
                                                } else if (month == 2) {
                                                        if (year % 400 == 0) {
                                                                if (day > 29) return getMessageFor(ele, 'idcard');
                                                        } else {
                                                                if (day > 28) return getMessageFor(ele, 'idcard');
                                                        }
                                                }
                                                if (/(1|3|5|7|8|10|12)/.test(month.toString())) {
                                                        if (day > 31) return getMessageFor(ele, 'idcard');
                                                } else {
                                                        if (day > 30) return getMessageFor(ele, 'idcard');
                                                }
                                        }
                                        return true;
                                } else {
                                        return getMessageFor(ele, 'idcard');
                                }
                        },
                        autoLabel: false, // 忽略 bootstrap 控件中的label
                        message: '身份证号码格式不正确'
                },
                //
                _fake: ''
        };

        var fieldsSelector = 'input[name], select[name], textarea[name]';

        var getMessageFor = function (field, rulename, params) {
                //
                // data-valid-[验证规则]  优先于验证规则默认信息设置
                // data-valid-ytjs        超级信息，优先于所有信息设置(ytjs -> 一统江山)
                //
                var form = field.parents('form'),
                        rules = form.data('_vopt').rules,
                        rule = rules[rulename],
                        message = field.data('valid-ytjs') || field.data('valid-' + rulename) || rule.message,
                        autoLabel = rule.autoLabel;

                if (!message || message.length == 0) {
                        message = '!!!缺少错误提示!!!';
                }
                // :: 修改器由于覆盖默认消息设置
                if (message.substr(0, 2) == '::') {
                        autoLabel = false;
                        message = message.substr(2);
                }
                // 替换参数
                if (params && params.length > 0) {
                        while (params.length > 0) {
                                message = message.replace(/%s/, params.shift());
                        }
                }
                var label = autoLabel === false ?
                        '' :
                        $('.control-label', field.parents('.control-group')).text().replace(/[:：　]/g, '');
                return $.trim(label) + message;
                // return message;
        };
        // 设置错误信息
        var setErrorMessageFor = function (field, message) {
                var ctgrp = field.parents('.control-group'),
                        opts = field.parents('form').data('_vopt');
                if (ctgrp.length == 0) ctgrp = field.parents('.controls-row');
                // User defined error method has the high priority
                if (opts.onErrorMessage && opts.onErrorMessage(message, field) === false) {
                        //
                        // Date: 2013-12-28
                        // 当表单中插入提示后, 可能导致 placeholder 显示位置不正确, 这里做个兼容
                        //
                        try {
                                var form = field.parents('form');
                                $('input, textarea', form).placeholder();
                        } catch (err) {
                        }
                        return;
                }

                var action = message && message.length > 0 ? 'show' : 'hide';
                if (opts.tipmode == 'popover') {
                        var anchor = field;
                        // 增加对 DatetimePicker 插件的支持
                        if (field.parents('.date').length > 0) {
                                anchor = field.parent();// anchor = field.parent('.date');
                        }
                        if (action == 'show') {
                                anchor.attr({
                                        'data-toggle': 'popover',
                                        'data-content': message,
                                        'data-placement': 'right',
                                        'data-trigger': 'manual',
                                        'data-html': true
                                });
                                anchor.popover('show');
                        } else {
                                anchor.popover('destroy');
                        }
                } else {
                        // Default inline error message
                        var errel = $('.help-block, .help-inline', ctgrp);
                        if (action == 'show') {
                                ctgrp.addClass('error');

                                if (errel && errel.length > 0) {
                                        errel.text(message);
                                } else {
                                        if (message != '不能为空')
                                                $('<span class="help-inline">' + message + '</span>').appendTo(field.parent());
                                }
                        } else {
                                ctgrp.removeClass('error');
                                if (errel && errel.length > 0) {
                                        errel.remove();//.text('');
                                }
                        }
                        //
                        // Date: 2013-12-28
                        // 当表单中插入提示后, 可能导致 placeholder 显示位置不正确, 这里做个兼容
                        //
                        try {
                                var form = field.parents('form');
                                $('input, textarea', form).placeholder();
                        } catch (err) {
                        }
                }
        };

        var validateField = function (field) {
                        var form = field.parents('form'),
                                rules = form.data('_vopt').rules,
                                rulenames = (field.data('valid') == undefined) ? [] : field.data('valid').split(' ');

                        field.val($.trim(field.val()));
                        for (var i = 0; i < rulenames.length; i++) {
                                var rconf = rulenames[i].split(':'),
                                        rulename = rconf.shift(),
                                        rule = rules[rulename];
                                //
                                // TODO::重复校验检查
                                //
                                // var repeat = field.data('vcache-'+rulename);
                                // if(repeat && repeat.length > 0){
                                // 	// found error
                                // }
                                if (!rulename || rulename == '') continue;
                                if (rule) {
                                        var message = rule.validate(field.val(), field, rconf);
                                        if (message && message.length > 0) {
                                                // Validate faile
                                                setErrorMessageFor(field, message);
                                                return false;
                                        }
                                } else {
                                        console.warn('BTVal: Skip undeinfed rule [' + rulename + '] for ' + field.attr('name') + '.');
                                }
                        }

                        return true;
                },
                validationForm = function (vform) { // 表单验证方法
                        vform = $(vform);
                        var options = vform.data('_vopt');

                        vform.submit(function () { // 提交时验证
                                if (options.formState) { // 重复提交则返回
                                        if (options.onRepeat) {
                                                options.onRepeat();
                                        }
                                        return false;
                                }
                                if (options.onValidate) {
                                        result = options.onValidate() === true;
                                }
                                options.formState = true;
                                clearErrorFor($(this));
                                var hasError = false;
                                var eles = $(fieldsSelector, vform);
                                eles.each(function () {
                                        // placeholder 兼容性设置
                                        var th = $(this),
                                                v = th.val(),
                                                hasholder = false;
                                        if (v == th.attr('placeholder')) {
                                                hasholder = true;
                                                th.val('');
                                        }
                                        // do validate
                                        if (validateField(th) === false) {
                                                hasError = true;
                                        }

                                        if (hasholder)
                                                th.val(th.attr('placeholder'));
                                        //
                                        if (hasError && options.breakOnError) {
                                                return false;
                                        }
                                });

                                options.formState = false;

                                var result = !hasError;
                                if (hasError) {
                                        if (options.onFaile)
                                                options.onFaile();
                                } else {
                                        // 如果定义了 onSuccess 方法并且方法返回 true 时才执行默认动作，否则放弃默认动作
                                        if (options.onSuccess) {
                                                result = options.onSuccess() === true;
                                        }
                                }
                                options.validated = true;
                                return result;
                        });

                        $(fieldsSelector, vform).focus(function () {
                                if (options.validated && options.onFormRefocus) {
                                        options.onFormRefocus();
                                }
                                options.validated = false;
                                //
                                setErrorMessageFor($(this), null);
                        }).blur(function () {
                                var th = $(this),
                                        v = th.val(),
                                        hasholder = false;
                                if (v == th.attr('placeholder')) {
                                        hasholder = true;
                                        th.val('');
                                }
                                //validateField($(this));
                                if (hasholder)
                                        th.val(th.attr('placeholder'));
                        }).filter('[type="hidden"]').each(function () {
                                // 如果需要验证的元素是一个隐藏字段, 则查找相关的代理元素并设置事件
                                var hid = $(this),
                                        delegate = $(hid.data('valid-delegate'));
                                if (delegate && delegate.length > 0) {
                                        delegate.focus(function () {
                                                setErrorMessageFor(hid, null);
                                        }).blur(function () {
                                                //validateField(hid);
                                        })
                                }
                        });

                },
                clearErrorFor = function (form) {
                        $('.control-group', form).removeClass('error');
                        $('.control-group .help-inline, .control-group .help-block', form).remove();//.text('');
                        //
                        try {
                                $('input[data-toggle="popover"], div[data-toggle="popover"], select[data-toggle="popover"], textarea[data-toggle="popover"]', form).popover('destroy');
                        } catch (e) {
                        }
                };

        // ===========================================
        //
        // ===========================================

        $.fn.validation = function (options) {
                if (typeof options == 'string') {
                        if (options == 'reset') {
                                clearErrorFor($(this));
                        }
                        return;
                }

                options = $.extend($.fn.validation.defaults, options);
                var rules = $.extend({}, validationRules, options.rules || {});
                options.rules = rules;
                return this.each(function () {
                        $(this).data('_vopt', $.extend({}, $.fn.validation.defaults, options));

                        validationForm($(this));
                });
        };
        $.fn.validatepass = function (field) {
                validateField($(this));
        };
        $.fn.validation.defaults = {
                rules: {},
                tipmode: 'default', // default, popover
                breakOnError: false, // 遇到错误就中断验证

                onFormRefocus: null, // 当表单重新获取焦点时触发
                onValidate: null, // 执行验证前触发
                onSuccess: null, // 验证成功回调。返回 true 表单执行默认操作
                onFaile: null, // 验证失败回调。不需要返回
                onErrorMessage: null, // 输出出错信息时调用. 返回 false 取消默认操作. onErrorMessage(message, fieldObject)
                //
                formState: false
        };
        $.extend({
                validation: {
                        getMessageFor: getMessageFor,
                        validate: validateField
                }
        });

}(window.jQuery);